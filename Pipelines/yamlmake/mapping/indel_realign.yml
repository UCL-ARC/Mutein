#run RealignerTargetCreator from GATK3
#note: GATK3 is not supported by Broad anymore, docs are harder to find
#and they will not answer support requests
#but I need indel realignment in order to support somatic callers which don't do it themselves
#https://web.archive.org/web/20160419061931/https://www.broadinstitute.org/gatk/guide/article?id=1247
#https://github.com/broadinstitute/gatk-docs/blob/master/gatk3-tutorials/(howto)_Perform_local_realignment_around_indels.md
#https://gatk.broadinstitute.org/hc/en-us/articles/360035890811-Resource-bundle
#https://console.cloud.google.com/storage/browser/genomics-public-data/resources/broad/hg38/v0/
#https://sites.google.com/a/broadinstitute.org/legacy-gatk-forum-discussions/2013-06-06-2013-02-12/2362-Best-approach-for-realignertargetcreator-and-indelrealigner
#running all samples through realignertargetcreator at once to create a single intervals files
#to be used for all samples from the same subset_id
#possible alternative indel realigner: ABRA2 https://anaconda.org/bioconda/abra2 https://github.com/mozack/abra2
- action:
    name:  "realigner_target_creator"
    exec:  "qsub"
    conda: "gatk3"

    qsub: 
        time:  "24:00:00"
        mem:   "2G"
        tmpfs: "20G"
        cores: "16"

    input:
        ibam:   "processed/{%dataset_id}/{=subset_id}/{+accession}/{+accession}_posn_sort.bam"
        known1: "{%ref/indels1}"
        known2: "{%ref/indels2}"

    output:
        indels: "processed/{%dataset_id}/{=subset_id}/.meta/realigner_indel.intervals"

    shell: |
        MY_TMP_DIR=${TMPDIR}/${RANDOM}${RANDOM}
        mkdir -p ${MY_TMP_DIR}

        gatk3 \
            -Xmx19G \
            -Djava.io.tmpdir=${MY_TMP_DIR} \
            -T RealignerTargetCreator \
            --num_threads {%qsub/cores} \
            -R {%ref/uncompressed} \
            -L {%intervals} \
            -I {%ibam/ -I } \
            -known {%known1} -known {%known2} \
            -o {%indels}

#make the map file to tell gatk where to output the realigned files
#otherwise they are output into the working directory regardless of input file path
- action:
    name:  "indel_realigner_mapfile"
    exec:  "local"

    input:
        ibam:   "processed/{%dataset_id}/{=subset_id}/{+accession}/{+accession}_posn_sort.bam"

    output:
        mapfile: "processed/{%dataset_id}/{=subset_id}/.meta/realigner_output.map"

    shell: |
        for acc in {+accession/ }
        do
            echo -e "${acc}_posn_sort.bam\tprocessed/{%dataset_id}/{=subset_id}/${acc}/${acc}_realn.bam"
        done \
        > {%mapfile}

# #run IndelRealigner from GATK3 so we can use somatic SNP callers that do not do their own
# #local denovo assembly / indel realignments
# #https://web.archive.org/web/20150419005211/https://www.broadinstitute.org/gatk/guide/tooldocs/org_broadinstitute_gatk_tools_walkers_indels_IndelRealigner.php#--nWayOut
# # --num_threads not supported by indelrealigner
# #the below processes all samples concurrently using the same, single core, process
# #it may be better to split the samples by individual to allow some parallelism
# - action:
#     name:  "indel_realigner"
#     exec:  "local"
#     conda: "gatk3"

#     qsub:
#         time:  "24:00:00"
#         mem:   "20G"
#         tmpfs: "20G"
#         cores: "2"

#     input:
#         ibam:    "processed/{%dataset_id}/{=subset_id}/{+accession}/{+accession}_posn_sort.bam"
#         indels:  "processed/{%dataset_id}/{=subset_id}/.meta/realigner_indel.intervals"
#         known1:  "{%ref/indels1}"
#         known2:  "{%ref/indels2}"
#         mapfile: "processed/{%dataset_id}/{=subset_id}/.meta/realigner_output.map"

#     output:
#         touch:  "processed/{%dataset_id}/{=subset_id}/.meta/{%name}.touch"

#     shell: |
#         MY_TMP_DIR=${TMPDIR}/${RANDOM}${RANDOM}
#         mkdir -p ${MY_TMP_DIR}

#         gatk3 \
#             -Xmx19G \
#             -Djava.io.tmpdir=${MY_TMP_DIR} \
#             -T IndelRealigner \
#             -R {%ref/uncompressed} \
#             -L {%intervals} \
#             -known {%known1} -known {%known2} \
#             -targetIntervals {%indels} \
#             -I {%ibam/ -I } \
#             -nWayOut {%mapfile}

#         touch {%touch}

#run IndelRealigner from GATK3 so we can use somatic SNP callers that do not do their own
#local denovo assembly / indel realignments
#https://web.archive.org/web/20150419005211/https://www.broadinstitute.org/gatk/guide/tooldocs/org_broadinstitute_gatk_tools_walkers_indels_IndelRealigner.php#--nWayOut
# --num_threads not supported by indelrealigner
#split the samples by individual to allow some parallelism
- action:
    name:  "indel_realigner_parallel"
    exec:  "qsub"
    conda: "gatk3"

    qsub:
        time:  "24:00:00"
        mem:   "12G"
        tmpfs: "20G"
        cores: "2"

    input:
        acc_list: "datasets/{%dataset_id}/{=subset_id}/.meta/indivs/{*indiv}/accession_list"
        indels:   "processed/{%dataset_id}/{=subset_id}/.meta/realigner_indel.intervals"
        known1:   "{%ref/indels1}"
        known2:   "{%ref/indels2}"
        mapfile:  "processed/{%dataset_id}/{=subset_id}/.meta/realigner_output.map"

    output:
        touch:  "processed/{%dataset_id}/{=subset_id}/.meta/{%name}.{*indiv}.touch"

    shell: |
        MY_TMP_DIR=${TMPDIR}/${RANDOM}${RANDOM}
        mkdir -p ${MY_TMP_DIR}

        #build list of accessions from current individual
        input_list=""
        for acc in $(cat {%acc_list})
        do
            input_list="${input_list} -I processed/{%dataset_id}/{=subset_id}/${acc}/${acc}_posn_sort.bam"
        done

        gatk3 \
            -Xmx19G \
            -Djava.io.tmpdir=${MY_TMP_DIR} \
            -T IndelRealigner \
            -R {%ref/uncompressed} \
            -L {%intervals} \
            -known {%known1} -known {%known2} \
            -targetIntervals {%indels} \
            ${input_list} \
            -nWayOut {%mapfile}

        touch {%touch}