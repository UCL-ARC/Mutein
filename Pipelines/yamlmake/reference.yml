#download the reference files into a temporary location
- action:
    name: "download_reference"

    readme_url: "{%ref/base_url}/{%ref/readme}"
    md5_url:    "{%ref/base_url}/{%ref/md5}"
    fasta_url:  "{%ref/base_url}/{%ref/fasta}"

    input:
      #changes to ref_config file trigger a rerun unless "action/run:never" is used
      ref_config: "{%conf_dir}/reference_config.yml"

    output:
      readme: "{%ref/tmp_dir}/{%ref/readme}"
      md5:    "{%ref/tmp_dir}/{%ref/md5}"
      fasta:  "{%ref/tmp_dir}/{%ref/fasta}"

    #download ensuring an overwrite and timestamp update of the outputs
    shell: |
      wget -O - {%readme_url} > {%readme} 
      wget -O - {%md5_url}    > {%md5}
      wget -O - {%fasta_url}  > {%fasta}

#do the md5 check of the reference file
- action:
    name: "check_reference"

    input:
      readme: "{%ref/tmp_dir}/{%ref/readme}"
      md5:    "{%ref/tmp_dir}/{%ref/md5}"
      fasta:  "{%ref/tmp_dir}/{%ref/fasta}"

    output:
      md5check: "{%ref/tmp_dir}/MD5.txt"

    #extract and check just the relevant checksum
    shell: |
        cat {%md5} | grep -e '{%ref/fasta}' > {%md5check} 
        cd {%ref/tmp_dir} && md5sum --check MD5.txt

#convert gzip into an indexed bgzip format
- action:
    name:  "create_bgzip"
    exec:  "qsub"
    conda: "{$MUT_PREFIX}bwa"
    qsub:
        time:  "1:00:00"
        mem:   "6G"
        tmpfs: "10G"
        cores: "1"

    input:
        orig_fasta: "{%ref/tmp_dir}/{%ref/fasta}" #gzip compressed fasta
        md5check:   "{%ref/tmp_dir}/MD5.txt"      #require that MD5 was checked

    output:
        fasta_bgz: "{%ref/fasta_bgz}"     #bgzip compressed fasta
        fasta_gzi: "{%ref/fasta_gzi}"

    shell: |
        gunzip --to-stdout {%orig_fasta} | bgzip -i -I {%fasta_gzi} > {%fasta_bgz}

#create fasta file index with samtools
- action:
    name:  "create_fai"
    exec:  "qsub"
    conda: "{$MUT_PREFIX}bwa"
    qsub:
        time:  "1:00:00"
        mem:   "6G"
        tmpfs: "10G"
        cores: "1"

    input:
        fasta_bgz: "{%ref/fasta_bgz}"

    output:
        fasta_fai: "{%ref/fasta_fai}"

    shell: |
        samtools faidx {%fasta_bgz}

#create bwa index
- action:
    name: "create_bwtsw"
    exec:  "qsub"
    conda: "{$MUT_PREFIX}bwa"
    qsub:
        time:  "2:00:00"
        mem:   "6G"
        tmpfs: "10G"
        cores: "1"

    #file extensions of all the index files bwa will create
    exts: [ "bwt","pac","ann","amb","sa" ]

    input:
        fasta_bgz: "{%ref/fasta_bgz}"

    output:
        bwt_indexes: "{%ref/fasta_bgz}.{-exts}"

    shell: |
        bwa index -a bwtsw {%fasta_bgz}

#create gatk index
- action:
    name: "create_gatk_dict"
    exec:  "local"
    conda: "{$MUT_PREFIX}gatk4"
    qsub:
        time:  "1:00:00"
        mem:   "6G"
        tmpfs: "10G"
        cores: "1"
    ym:
        #disabling strict mode to prevent a conda error:
        #/lustre/home/ccaervi/mambaforge/envs/mutein_gatk4/etc/conda/activate.d/openjdk_activate.sh:
        #line 1: JAVA_HOME: unbound variable
        bash_setup: "source ~/.bashrc\nset +o history" #disabling strict mode

    input:
        fasta_bgz: "{%ref/fasta_bgz}"

    output:
        fasta_dict: "{%ref/fasta_dict}"

    shell: |
        gatk CreateSequenceDictionary -R {%fasta_bgz} -O {%fasta_dict}
