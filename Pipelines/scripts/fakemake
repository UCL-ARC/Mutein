#!/usr/bin/env python

import argparse
import fakemake as fm

def run_main():
    args,parser = parse_args()

    if args.yaml and args.qsub:
        print("Cannot use --yaml and --qsub at the same time. --qsub is only used internally by fakemake and should not normally be used the user directly.")
        exit(1)

    if args.yaml != None:
        #process a fakemake file
        pipeline = fm.parse_yaml(args.yaml)
        fm.process(pipeline,args.yaml,args=args)

    elif args.qsub != None:
        #carry out a job on a compute node spawned from qsub (gridengine)
        fm.qsub_execute_job(args.qsub)

    else:
        parser.print_help()

def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('--yaml',help="YAML pipeline definition file to execute")
    parser.add_argument('--run-only',action='extend',nargs="+",type=str,help="run only the named action(s)")
    parser.add_argument('--run-from',help="only start running at the named action")
    parser.add_argument('--run-until',help="stop running from before the named action")
    parser.add_argument('--dry-run','--dryrun',action='store_true',help="do not run anything ,just report what would have been run")
    parser.add_argument('--quiet',action='store_true',help="do not print any status messages to screen")
    parser.add_argument('--nologs',action='store_true',help="do not save any status or error messages to the main log files")

    parser.add_argument('--qsub',help="used internally to execute a job using qsub")
    args = parser.parse_args()
    return args,parser

if __name__ == "__main__":
    run_main()
