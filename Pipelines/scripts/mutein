#!/usr/bin/env python3

import argparse
import random
from pymutein import *

#seed with system time
random.seed()

def main_func():
    args = parse_args()

    if args.subcommand == "check-cwd":    check_cwd(args)
    if args.subcommand == "recycle":      recycle(args)
    if args.subcommand == "set-password": set_password(args)
    if args.subcommand == "encrypt-json": encrypt_json(args)
    if args.subcommand == "truncate":     truncate(args)
    if args.subcommand == "cut":          cut(args)
    if args.subcommand == "symlink":      symlink(args)
    if args.subcommand == "aes-encrypt":  aes_encrypt(args)
    if args.subcommand == "aes-decrypt":  aes_decrypt(args)

def parse_args():
    '''
    parse arguments from command line
    '''

    parser = argparse.ArgumentParser(description='Wrapper function for top-level mutein functions')
    subparsers = parser.add_subparsers(dest="subcommand")

    #check_cwd
    check_cwd = subparsers.add_parser('check-cwd', help='check the working directory is the expected data folder')

    #recycle
    recycle = subparsers.add_parser('recycle', help='move the file into a subfolder called recycle_bin')
    recycle.add_argument('file',nargs='+',help="list of files to recycle, last one must be a list terminator END")

    #truncate
    truncate = subparsers.add_parser('truncate', help='truncate file to empty without changing mtime')
    truncate.add_argument('file',nargs='+',help="list of files to truncate")
    truncate.add_argument('-n',action='store_true',help="no error if a file doesn't exists")

    #cut
    cut =  subparsers.add_parser('cut', help='extract requested field(s) from csv file on stdin, allows quoted fields')
    cut.add_argument('--field','-f',type=int,nargs='+',required=True,help="field(s) to extract")
    cut.add_argument('--output-delim','-o',help="output field delimiter, defaults to input field delimiter")
    cut.add_argument('--csvopts',help="""csv.reader options as json eg --csvopts '{"dialect":"excel","delimiter":"|"}'""")

    #symlink
    symlink =  subparsers.add_parser('symlink', help='create relative symlink with shortest possible path')
    symlink.add_argument('--target',required=True,help="file the symlink points to")
    symlink.add_argument('--link',required=True,help="the symlink")

    #encrypt/decrypt file
    aes_encrypt  = subparsers.add_parser('aes-encrypt', help='AES encrypt a file')
    aes_encrypt.add_argument('--input-file',required=True,help="file to encrypt")
    aes_encrypt.add_argument('--output-file',required=True,help="encrypted output file")
    aes_encrypt.add_argument('--key-file',default="PROMPT",help="file containing the key, prompt if omitted")

    aes_decrypt  = subparsers.add_parser('aes-decrypt', help='AES decrypt a file to stdout')
    aes_decrypt.add_argument('--input-file',required=True,help="file to decrypt")
    aes_decrypt.add_argument('--output-file',required=True,help="decrypted output file")
    aes_decrypt.add_argument('--key-file',default="PROMPT",help="file containing the key, prompt if omitted")

    args = parser.parse_args()

    return args

if __name__ == "__main__":
    globals()["main_func"]()
